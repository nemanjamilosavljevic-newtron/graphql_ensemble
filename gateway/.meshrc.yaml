sources:
  - name: Authors
    handler:
      graphql:
        endpoint: http://localhost:4100
  - name: Books
    handler:
      graphql:
        endpoint: http://localhost:4200

#additionalTypeDefs: |
#  extend type Book {
#    author: Author
#  }
#  extend type Author {
#    books: [Book]
#  }
#
#additionalResolvers:
#  - type: Book
#    field: author
#    requiredSelectionSet: "{ authorId }"
#    targetSource: Authors
#    targetMethod: author
#    args:
#      id: "{root.authorId}"
#  - type: Author
#    field: books
#    requiredSelectionSet: "{ booksIds }"
#    targetSource: Books
#    targetMethod: books
#    args:
#      id: "{root.booksIds}"

#transforms:
#  - mock:
#      if: false
#      preserveResolvers: true
#      mocks:
#        - apply: Query.author
#          store:
#            type: Author
#            key: "{ args.id }"
#        - apply: Author.id
#          custom: "./src/mocks/author#id"
#        - apply: Author.name
#          custom: "./src/mocks/author#name"
#        - apply: Query.authors
#          length: 5
#        - apply: Mutation.updateAuthor
#          custom: "./src/mocks/mutations#updateAuthor"

serve:
  cors: { origin: http://localhost:3000 }
  exampleQuery: |
    query Books {
      books {
        id
        title
      }
    }
    query Book {
      book(id: 1) {
        id
        title
      }
    }
    query Authors {
      authors{
        id
        name
        books{
         id
         title
        }
      }
    }
    query Author{
      author(id:1){
        id
        books{
          id
          title
        }
      }
    }
    mutation CreateAuthor($authorCreateInput: AuthorCreate!) {
      createAuthor(authorCreateInput: $authorCreateInput){
        id
        name
        books {
          id
        }
      }
    }
    mutation UpdateAuthor($id: ID!, $authorUpdateInput: AuthorUpdate!) {
      updateAuthor(id: $id, authorUpdateInput: $authorUpdateInput){
        id
        name
      }
    }
